// =======
// Layouts
// =======

// susy default settings
$susy: (
  global-box-sizing: border-box,
  gutter-position: split,
  gutters: 1/4,
  // debug: (image: show)
);
@include global-box-sizing(border-box); //TODO: [Susy 2.2], $inherit: true);

// layout properties
$jl-layouts: (
  sm: (susy: (columns: 4), breakpoint: 320px),
  md: (susy: (columns: 6), breakpoint: 640px),
  lg: (susy: (columns: 8), breakpoint: 960px),
  xl: (susy: (columns: 12), breakpoint: 1280px),
) !global;

// get susy layout by name from $jl-layouts
//
// Parameters:
// @name: layout name
@function jl-layout($name) {
  $settings: map-get-deep($jl-layouts, $name, susy);
  @return map-merge($susy, $settings);
}

// set susy layout by name from $jl-layouts
//
// Parameters:
// @name: layout name
@mixin jl-container($name) {
  $layout: jl-layout($name);
  @include container($layout);
}

// set susy layout for all child selectors
// by name from $jl-layouts. global settings are restored
// outside of this content block.
//
// Parameters:
// @name: layout name
@mixin with-jl-layout($name) {
  $layout: jl-layout($name);
  @include with-layout($layout, $clean: true) {
    @content;
  }
}

// set susy breakpoint by layout name from $jl-layouts.
// sets a min-width media query
//
// Parameters:
// @name: layout name
@mixin jl-breakpoint($name) {
  $query: map-get-deep($jl-layouts, $name, breakpoint);
  $layout: jl-layout($name);
  @include susy-breakpoint($query, $layout) {
    @content;
  }
}

// set susy breakpoint by layout name from $jl-layouts.
// this uses respond-to property on $jl-layouts to set
// a min-width AND max-width media query.
// Note: ***use this to prevent smaller layouts from getting EVERYTHING
//
// Parameters:
// @name: layout name
@mixin jl-respond-to($name) {
  $query: map-get-deep($jl-layouts, $name, respond-to);
  $layout: jl-layout($name);
  @include susy-breakpoint($query, $layout) {
    @content;
  }
}

// inspired by: Max Luster @maxluster
// https://gist.github.com/maxluster/168e650267bac9faaafd
//
// Set values for a list of properties at
// specified breakpoints.
// Example usage:
// @include jl-responsive((width:10px, height), (sm: 10px, md: (1rem, 15px)));
//
// Parameters:
// @properties: a single value, list, or map of css properties
//   map specifies default values (before media queries applied)
//   ex: width or (width height) or (width: 10px height: 20em)
// @layout-values: map of layouts with values of property values.
//   if a single value is used for a layout in the case where multiple
//   properties are specified, the value will be used for all properties
//   at that breakpoint. the layouts (keys of the map) are from $jl-layouts
//   ex: (sm: 10px, md: (2rem, 3px))
@mixin jl-responsive($properties, $layout-values) {
  // set default values
  @if type-of($properties) == map {
    @each $property, $default in $properties {
      #{$property}: $default;
    }
    // strip default values
    $properties: map-keys($properties);
  }

  // set properties for each layout/breakpoint
  @each $layout, $values in $layout-values {
    // example data at this point:
    // $layout: sm
    // $values: (12px, 20px) || 10px
    @include jl-breakpoint($layout) {
      $i: 1;
      @each $property in $properties {
        @if length($values) >= $i {
          #{$property}: nth($values, $i);
          $i: $i + 1;
        }
        @else { // use first value as catch all
          #{$property}: nth($values, 1);
        }
      }
    }
  }
}

// add respond-to property to $jl-layouts.
// this contains min-width and max-width for breakpoints.
@each $name, $info in $jl-layouts {
  $names: map-keys($jl-layouts);
  $index: index($names, $name);
  // Current and next breakpoint info.
  $current-breakpoint: map-get($info, breakpoint);
  $next-name: null;
  $next-breakpoint: null;
  @if $index < length($names) {
    $next-name: nth($names, $index + 1);
    $next-breakpoint: map-get-deep($jl-layouts, $next-name, breakpoint);
  }
  // Construct respond-to breakpoint for each layout. The first and
  // last media queries are different than each middle layout.
  $respond-to: null;
  $min-width: null;
  $max-width: null;
  @if $index == 1 {
    $max-width: $next-breakpoint - 1px;
    $respond-to: max-width $max-width;
  } @else if $index != length($names) {
    $min-width: $current-breakpoint;
    $max-width: $next-breakpoint - 1px;
    $respond-to: (width $min-width $max-width);
  } @else {
    $min-width: $current-breakpoint;
    $respond-to: $min-width;
  }
  // Add respond-to to the jl-layouts map.
  $jl-layouts: map-set-deep($jl-layouts, ($name, respond-to), $respond-to) !global;
}
