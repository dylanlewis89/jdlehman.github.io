// ===============
// Vertical Rhythm
// ===============

// Set up vertical rhythm for an element
//
// Parameters:
// @font-size: font-size in rems, px, or ems. this is the height if use-height is true. (required)
// @bottom-rows: number of rows (height of $line-height-base) on bottom. defaults to 1. (optional)
// @top-rows: number of rows (height of $line-height-base) on top (optional)
// @use-height: true if using an element that has height beyond font-size (buttons, images, divs, etc.) (optional)
// @border: total border in rems, px, or ems used on element (sum of top and bottom border). this prevents border from throwing off rhythm. (optional)
//   since the border-box model is being used, border is only needed on elements that are not using height. that is where @use-height is false
//
// ***Note: $bottom-rows and $top-rows allow decimal (and negative) values. keep in mind a decimal value
// will knock off the vertical rhythm for that element, though it will pick up again after the disturbance
//
@mixin jl-vertical-rhythm($font-size, $bottom-rows: 1, $top-rows: 0, $use-height: false, $border: 0rem) {
  $font-size: jl-convert-to($font-size, 'rem');
  $border: if($use-height, 0rem, jl-convert-to($border, 'rem'));
  $multiplier: ceil($font-size / $jl-line-height-base);
  // check if height based element
  // if so use height property for height, otherwise use line-height property
  @if $use-height {
    $leftover: $jl-line-height-base * $multiplier - $font-size - $border;
    height:         $font-size;
    margin-top:     $line-height-base * $top-rows + $leftover / 2;
    margin-bottom:  $line-height-base * $bottom-rows + $leftover / 2;
  }
  @else { // text based element (uses line height)
    font-size:      $font-size;
    line-height:    $jl-line-height-base * $multiplier;
    margin-top:     $jl-line-height-base * $top-rows;
    margin-bottom:  $jl-line-height-base * $bottom-rows - $border;
  }
}

// Set left and right margin (vertical rhythm friendly)
// Use in place of margin: $size
//
// Parameters
// @size: desired size, unit agnostic. takes a list or single value.
//   eg: $size: 1rem sets both to 1rem, $size: 1rem 2rem sets left to 1rem and right to 2rem
// @units: units to use (rem, em, px). (optional defaults to rems)
//
@mixin jl-margin($size, $units: 'rem') {
  $left-size: $size;
  $right-size: $size;

  @if type-of($size) == list {
    $left-size: nth($size, 1);
    $right-size: nth($size, 2);
  }
  margin-left: jl-convert-to($left-size, $units);
  margin-right: jl-convert-to($right-size, $units);
}

// Set left and right padding (vertical rhythm friendly)
// Use in place of padding: $size
//
// Parameters
// @size: desired size, unit agnostic. takes a list or single value.
//   eg: $size: 1rem sets both to 1rem, $size: 1rem 2rem sets left to 1rem and right to 2rem
// @units: units to use (rem, em, px). (optional defaults to rems)
//
@mixin jl-padding($size, $units: 'rem') {
  $left-size: $size;
  $right-size: $size;

  @if type-of($size) == list {
    $left-size: nth($size, 1);
    $right-size: nth($size, 2);
  }
  padding-left: jl-convert-to($left-size, $units);
  padding-right: jl-convert-to($right-size, $units);
}
